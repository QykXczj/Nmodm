name: 创建发行版

on:
  workflow_dispatch:
    inputs:
      prerelease:
        description: '是否为预发布版本'
        required: false
        default: false
        type: boolean
      draft:
        description: '是否为草稿版本'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  actions: read

jobs:
  create-release:
    runs-on: windows-latest

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 读取版本号
      id: get_version
      run: |
        Write-Host "🔎 从 src/version.json 读取版本号"
        if (-Not (Test-Path "src/version.json")) {
          Write-Host "❌ 未找到 src/version.json，退出"
          exit 1
        }
        $content = Get-Content -Raw -Path src/version.json
        try {
          $obj = ConvertFrom-Json $content
        } catch {
          Write-Host "❌ 解析 src/version.json 失败"
          exit 1
        }
        $version = $obj.version
        if (-not $version) {
          Write-Host "❌ version 字段为空"
          exit 1
        }
        # 移除可能存在的 v 前缀，得到纯数字版本
        $versionNumber = $version.TrimStart('v')
        # 添加 v 前缀，用于标签
        $versionTag = "v$versionNumber"
        Write-Host "✅ 读取版本: $versionTag (标签), $versionNumber (文件名)"
        # 输出两个变量
        echo "version=$versionTag" >> $env:GITHUB_OUTPUT
        echo "version_number=$versionNumber" >> $env:GITHUB_OUTPUT

    - name: 设置 Python 环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install nuitka

    - name: 创建必要目录
      run: |
        New-Item -ItemType Directory -Force -Path "OnlineFix"
        New-Item -ItemType Directory -Force -Path "Mods"
        "OnlineFix64.dll" | Out-File -FilePath "OnlineFix/dlllist.txt" -Encoding UTF8

    - name: 使用 Nuitka 打包 (目录版)
      run: |
        Write-Host "🔨 直接调用 NuitkaBuilder 进行构建"
        $env:PYTHONIOENCODING = "utf-8"
        python -c "
        import sys
        import os
        os.environ['PYTHONIOENCODING'] = 'utf-8'
        sys.path.append('.')
        from build_nuitka import NuitkaBuilder

        print('🎯 Nuitka 自动打包工具')
        print('=' * 50)

        builder = NuitkaBuilder()

        # 检查环境
        if not builder.check_environment():
            print('❌ 环境检查失败')
            sys.exit(1)

        # 执行独立模式构建
        print('🚀 开始独立模式打包...')
        if builder.build(onefile=False, verbose_mode='detailed'):
            print('✅ 独立模式打包完成')
        else:
            print('❌ 独立模式打包失败')
            sys.exit(1)
        "

    - name: 创建发布包
      run: |
        New-Item -ItemType Directory -Force -Path "release"

        # 查找 Nuitka 构建输出目录
        Write-Host "🔍 查找 Nuitka 构建输出目录..."
        $nuitkaDir = $null
        $version = "${{ steps.get_version.outputs.version_number }}"

        # 可能的目录名称
        $possibleDirs = @(
          "Builds/Nuitka/Nmodm_v$version",
          "Builds/Nuitka/main.dist",
          "Builds/Nuitka/Nmodm_nuitka_standalone"
        )

        foreach ($dir in $possibleDirs) {
          if (Test-Path $dir) {
            $nuitkaDir = $dir
            Write-Host "✅ 找到构建目录: $nuitkaDir"
            break
          }
        }

        # 如果还没找到，搜索所有包含exe文件的目录
        if (-not $nuitkaDir -and (Test-Path "Builds/Nuitka")) {
          Write-Host "🔍 搜索包含exe文件的目录..."
          $exeDirs = Get-ChildItem "Builds/Nuitka" -Directory | Where-Object {
            (Get-ChildItem $_.FullName -Filter "*.exe" -ErrorAction SilentlyContinue).Count -gt 0
          }
          if ($exeDirs.Count -gt 0) {
            $nuitkaDir = $exeDirs[0].FullName -replace [regex]::Escape((Get-Location).Path + "\"), ""
            Write-Host "✅ 找到包含exe的目录: $nuitkaDir"
          }
        }

        if ($nuitkaDir) {
          Write-Host "📦 创建发布包: $nuitkaDir"

          # 显示目录内容
          Write-Host "📋 目录内容:"
          Get-ChildItem $nuitkaDir | Select-Object Name, Length, LastWriteTime | Format-Table

          # 创建压缩包
          Compress-Archive -Path "$nuitkaDir/*" -DestinationPath "release/Nmodm_v${{ steps.get_version.outputs.version_number }}.zip" -Force
          Write-Host "✅ 主发布包已创建: Nmodm_v${{ steps.get_version.outputs.version_number }}.zip"
        } else {
          Write-Host "❌ 未找到 Nuitka 构建输出"
          Write-Host "📋 Builds 目录结构:"
          if (Test-Path "Builds") {
            Get-ChildItem "Builds" -Recurse | Select-Object FullName, Length | Format-Table
          } else {
            Write-Host "Builds 目录不存在"
          }
          exit 1
        }

        # 创建源代码包
        $sourceFiles = @("src", "OnlineFix", "main.py", "requirements.txt", "README.md", "LICENSE")
        $existingFiles = @()
        foreach ($file in $sourceFiles) {
          if (Test-Path $file) {
            $existingFiles += $file
          }
        }
        if ($existingFiles.Count -gt 0) {
          Compress-Archive -Path $existingFiles -DestinationPath "release/Nmodm_Source_v${{ steps.get_version.outputs.version_number }}.zip"
          Write-Host "Source code package created: Nmodm_Source_v${{ steps.get_version.outputs.version_number }}.zip"
        }

    - name: 创建 Inno Setup 脚本
      run: |
        # 查找 Nuitka 构建输出目录 (与发布包创建步骤保持一致)
        Write-Host "🔍 查找 Nuitka 构建输出目录..."
        $nuitkaDir = $null
        $version = "${{ steps.get_version.outputs.version_number }}"

        # 可能的目录名称
        $possibleDirs = @(
          "Builds/Nuitka/Nmodm_v$version",
          "Builds/Nuitka/main.dist",
          "Builds/Nuitka/Nmodm_nuitka_standalone"
        )

        foreach ($dir in $possibleDirs) {
          if (Test-Path $dir) {
            $nuitkaDir = $dir
            Write-Host "✅ 找到构建目录: $nuitkaDir"
            break
          }
        }

        # 如果还没找到，搜索所有包含exe文件的目录
        if (-not $nuitkaDir -and (Test-Path "Builds/Nuitka")) {
          Write-Host "🔍 搜索包含exe文件的目录..."
          $exeDirs = Get-ChildItem "Builds/Nuitka" -Directory | Where-Object {
            (Get-ChildItem $_.FullName -Filter "*.exe" -ErrorAction SilentlyContinue).Count -gt 0
          }
          if ($exeDirs.Count -gt 0) {
            $nuitkaDir = $exeDirs[0].FullName -replace [regex]::Escape((Get-Location).Path + "\"), ""
            Write-Host "✅ 找到包含exe的目录: $nuitkaDir"
          }
        }

        if (-not $nuitkaDir) {
          Write-Host "❌ 未找到 Nuitka 构建输出目录"
          Write-Host "📋 Builds 目录结构:"
          if (Test-Path "Builds") {
            Get-ChildItem "Builds" -Recurse | Select-Object FullName | Format-Table
          } else {
            Write-Host "Builds 目录不存在"
          }
          exit 1
        }

        Write-Host "✅ 使用构建目录: $nuitkaDir"

        # 动态创建 Inno Setup 脚本 (版本已在上面定义)

        # 创建脚本内容
        $setupSection = "[Setup]"
        $setupSection += "`nAppName=Nmodm"
        $setupSection += "`nAppVersion=$version"
        $setupSection += "`nAppPublisher=QykXczj"
        $setupSection += "`nDefaultDirName={src}\Nmodm_v$version"
        $setupSection += "`nDefaultGroupName=Nmodm"
        $setupSection += "`nOutputDir=release"
        $setupSection += "`nOutputBaseFilename=Nmodm_v$version-Setup"
        $setupSection += "`nCompression=lzma2"
        $setupSection += "`nSolidCompression=yes"
        $setupSection += "`nUninstallDisplayName=Nmodm v$version"
        $setupSection += "`nUninstallDisplayIcon={app}\Nmodm.exe"
        $setupSection += "`nCreateUninstallRegKey=yes"
        $setupSection += "`nMinVersion=6.1sp1"
        $setupSection += "`nArchitecturesAllowed=x64"
        $setupSection += "`nArchitecturesInstallIn64BitMode=x64"

        # 添加版本信息
        $setupSection += "`nAppCopyright=Copyright © 2025"
        $setupSection += "`nAppComments=Nmodm - 游戏模组管理器"
        $setupSection += "`nVersionInfoVersion=$version.0"
        $setupSection += "`nVersionInfoDescription=Nmodm - 游戏模组管理器"
        $setupSection += "`nVersionInfoCopyright=Copyright © 2025"
        $setupSection += "`nVersionInfoProductName=Nmodm"
        $setupSection += "`nVersionInfoProductVersion=$version.0"

        # 添加图标支持
        if (Test-Path "zwnr.ico") {
          $setupSection += "`nSetupIconFile=zwnr.ico"
        }

        # 添加多语言支持
        $setupSection += "`n"
        $setupSection += "`n; 多语言支持"
        $setupSection += "`nShowLanguageDialog=auto"

        $languagesSection = "`n`n[Languages]"
        # 英文（默认）
        $languagesSection += "`nName: `"en`"; MessagesFile: `"compiler:Default.isl`""
        # 简体中文
        if (Test-Path "ChineseSimplified.isl") {
          $languagesSection += "`nName: `"chinesesimplified`"; MessagesFile: `"ChineseSimplified.isl`""
        } else {
          $languagesSection += "`nName: `"chinesesimplified`"; MessagesFile: `"compiler:Languages\ChineseSimplified.isl`""
        }

        $filesSection = "`n`n[Files]"
        $filesSection += "`nSource: `"$nuitkaDir\*`"; DestDir: `"{app}`"; Flags: ignoreversion recursesubdirs createallsubdirs"

        $iconsSection = "`n`n[Icons]"
        $iconsSection += "`nName: `"{group}\Nmodm`"; Filename: `"{app}\Nmodm.exe`""
        $iconsSection += "`nName: `"{autodesktop}\Nmodm`"; Filename: `"{app}\Nmodm.exe`"; Tasks: desktopicon"

        $tasksSection = "`n`n[Tasks]"
        # 英文描述
        $tasksSection += "`nName: `"desktopicon`"; Description: `"{cm:CreateDesktopIcon}`"; GroupDescription: `"{cm:AdditionalIcons}`"; Flags: unchecked"

        $runSection = "`n`n[Run]"
        # 使用 CustomMessages 中的消息
        $runSection += "`nFilename: `"{app}\Nmodm.exe`"; Description: `"{cm:LaunchProgram,Nmodm}`"; Flags: nowait postinstall skipifsilent"

        $customMessagesSection = "`n`n[CustomMessages]"
        # 英文自定义消息
        $customMessagesSection += "`nen.LaunchProgram=Launch %1"
        # 中文自定义消息
        $customMessagesSection += "`nchinesesimplified.LaunchProgram=启动 %1"

        # 组合所有部分
        $issContent = $setupSection + $languagesSection + $filesSection + $iconsSection + $tasksSection + $runSection + $customMessagesSection

        # 写入文件
        $issContent | Out-File -FilePath "setup.iss" -Encoding UTF8
        Write-Host "✅ Inno Setup 脚本已创建"

        # 验证脚本内容
        Write-Host "📋 脚本内容预览:"
        Get-Content "setup.iss" | Select-Object -First 10 | Write-Host

    - name: 验证 Inno Setup 脚本
      run: |
        Write-Host "📋 当前工作目录: $(Get-Location)"
        Write-Host "📋 目录内容:"
        Get-ChildItem | Select-Object Name, Length, LastWriteTime | Format-Table

        if (Test-Path "setup.iss") {
          Write-Host "✅ Inno Setup 脚本存在"
          Write-Host "📋 脚本文件大小: $((Get-Item 'setup.iss').Length) 字节"
          Write-Host "📋 脚本绝对路径: $((Get-Item 'setup.iss').FullName)"
          Write-Host "📋 脚本内容:"
          Get-Content "setup.iss" | Write-Host
        } else {
          Write-Host "❌ Inno Setup 脚本不存在"
          Write-Host "📋 查找所有 .iss 文件:"
          Get-ChildItem -Recurse -Filter "*.iss" | Select-Object FullName | Write-Host
          exit 1
        }

    - name: 使用 Chocolatey 安装 Inno Setup
      run: |
        Write-Host "📦 安装 Inno Setup"
        choco install innosetup -y
        Write-Host "✅ Inno Setup 安装完成"

    - name: 手动构建 Windows 安装包
      run: |
        Write-Host "🔨 手动编译 Inno Setup 脚本"

        # 查找 ISCC.exe
        $isccPaths = @(
          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe",
          "C:\Program Files\Inno Setup 6\ISCC.exe",
          "C:\tools\InnoSetup\ISCC.exe"
        )

        $isccPath = $null
        foreach ($path in $isccPaths) {
          if (Test-Path $path) {
            $isccPath = $path
            Write-Host "✅ 找到编译器: $isccPath"
            break
          }
        }

        if (-not $isccPath) {
          Write-Host "❌ 找不到 Inno Setup 编译器"
          Write-Host "📋 搜索所有可能的 ISCC.exe:"
          Get-ChildItem -Path "C:\" -Recurse -Name "ISCC.exe" -ErrorAction SilentlyContinue | Write-Host
          exit 1
        }

        # 编译脚本
        Write-Host "🔨 开始编译..."
        & "$isccPath" "setup.iss" /O+

        if ($LASTEXITCODE -eq 0) {
          Write-Host "✅ 编译成功"
        } else {
          Write-Host "❌ 编译失败，退出代码: $LASTEXITCODE"
          exit 1
        }

    - name: 验证并移动安装包
      run: |
        Write-Host "📋 检查可能的输出位置..."

        # 检查多个可能的输出位置
        $possiblePaths = @("Output", "release", ".")
        $foundExe = $false

        foreach ($path in $possiblePaths) {
          if (Test-Path $path) {
            Write-Host "✅ 检查目录: $path"
            $exeFiles = Get-ChildItem "$path\*.exe" -ErrorAction SilentlyContinue
            if ($exeFiles.Count -gt 0) {
              Write-Host "✅ 在 $path 中找到 $($exeFiles.Count) 个 .exe 文件"
              foreach ($file in $exeFiles) {
                Write-Host "  - $($file.Name) ($($file.Length) 字节)"
                # 如果不在 release 目录，移动到 release 目录
                if ($path -ne "release") {
                  if (-not (Test-Path "release")) {
                    New-Item -ItemType Directory -Path "release" -Force
                  }
                  Move-Item $file.FullName "release\" -Force
                  Write-Host "  ✅ 已移动到 release 目录"
                }
              }
              $foundExe = $true
              break
            } else {
              Write-Host "  ❌ 在 $path 中未找到 .exe 文件"
            }
          } else {
            Write-Host "  ❌ 目录 $path 不存在"
          }
        }

        if (-not $foundExe) {
          Write-Host "❌ 在所有可能位置都未找到安装包文件"
          Write-Host "📋 当前目录完整内容:"
          Get-ChildItem -Recurse | Where-Object { $_.Extension -eq ".exe" } | Select-Object FullName, Length | Format-Table
          exit 1
        }

        # 显示最终发布目录内容
        Write-Host "📦 发布目录最终内容:"
        if (Test-Path "release") {
          Get-ChildItem "release" | Select-Object Name, Length, LastWriteTime | Format-Table
        } else {
          Write-Host "❌ release 目录不存在"
        }
        
    - name: 创建发行版
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: Nmodm ${{ steps.get_version.outputs.version }}
        body: |
          ## 🎮 Nmodm ${{ steps.get_version.outputs.version }}
          
          **Nmodm** - 艾尔登法环：夜之君临 模组管理工具 | Elden Ring: Nightreign Mod Manager
          
          ---
          
          ### ✨ 主要更新 | What's New
          
          - 🌍 **完整国际化支持** | Full internationalization support
            - 虚拟局域网页面完全翻译 | Virtual LAN page fully translated
            - 所有界面支持中英文切换 | All UI supports Chinese/English switching
          
          - 📦 **多语言安装包** | Multi-language installer
            - 安装程序自动检测系统语言 | Auto-detect system language
            - 支持中文和英文界面 | Supports Chinese and English UI
          
          - 📚 **完整文档系统** | Complete documentation
            - 中英文用户指南和开发指南 | Chinese & English user/developer guides
            - 详细的更新日志 | Detailed changelog
          
          - 🔧 **版本管理优化** | Version management improvements
            - 统一版本号管理 | Unified version management
            - 自动化发布流程 | Automated release workflow
          
          📖 **完整更新日志** | Full Changelog: [中文](https://github.com/QykXczj/Nmodm/blob/main/docs/zh/CHANGELOG.md) | [English](https://github.com/QykXczj/Nmodm/blob/main/docs/en/CHANGELOG.md)
          
          ---
          
          ### 📦 下载说明 | Download Guide
          
          #### 🔹 推荐下载 | Recommended
          
          - **`Nmodm_v${{ steps.get_version.outputs.version_number }}-Setup.exe`** - Windows 安装包 | Windows Installer
            - ✅ 自动安装，创建桌面快捷方式 | Auto-install with desktop shortcut
            - ✅ 支持卸载 | Supports uninstallation
            - ✅ 适合长期使用 | Best for long-term use
          
          #### 🔹 便携版 | Portable Version
          
          - **`Nmodm_v${{ steps.get_version.outputs.version_number }}.zip`** - 便携版压缩包 | Portable ZIP
            - ✅ 解压即用，无需安装 | Extract and run, no installation needed
            - ✅ 适合临时使用或U盘携带 | Good for temporary use or USB drive
            - ⚠️ 需手动解压到非中文路径 | Extract to non-Chinese path
          
          ---
          
          ### 🚀 快速开始 | Quick Start
          
          #### 安装版 | Installer Version
          1. 下载 `Nmodm_v${{ steps.get_version.outputs.version_number }}-Setup.exe`
          2. 双击运行安装程序 | Double-click to run installer
          3. 选择安装路径（建议非中文路径）| Choose installation path (non-Chinese recommended)
          4. 完成安装，启动 Nmodm | Complete installation and launch Nmodm
          
          #### 便携版 | Portable Version
          1. 下载 `Nmodm_v${{ steps.get_version.outputs.version_number }}.zip`
          2. 解压到非中文路径 | Extract to non-Chinese path
          3. 运行 `Nmodm.exe` | Run `Nmodm.exe`
          
          #### 首次使用 | First Time Use
          1. 在"配置"页面设置游戏路径 | Set game path in "Config" page
          2. 在"工具下载"页面下载 ME3 工具 | Download ME3 tools in "Tool Download" page
          3. 在"模组配置"页面管理模组 | Manage mods in "Mod Config" page
          4. 在"快速启动"页面启动游戏 | Launch game in "Quick Launch" page
          
          ---
          
          ### 📚 文档 | Documentation
          
          - 📖 [用户指南 | User Guide](https://github.com/QykXczj/Nmodm/blob/main/docs/zh/USER_GUIDE.md) ([EN](https://github.com/QykXczj/Nmodm/blob/main/docs/en/USER_GUIDE.md))
          - 👨‍💻 [开发指南 | Developer Guide](https://github.com/QykXczj/Nmodm/blob/main/docs/zh/DEVELOPER_GUIDE.md) ([EN](https://github.com/QykXczj/Nmodm/blob/main/docs/en/DEVELOPER_GUIDE.md))
          - 🤝 [贡献指南 | Contributing](https://github.com/QykXczj/Nmodm/blob/main/docs/zh/CONTRIBUTING.md) ([EN](https://github.com/QykXczj/Nmodm/blob/main/docs/en/CONTRIBUTING.md))
          
          ---
          
          ### ⚠️ 系统要求 | System Requirements
          
          - Windows 10/11 (64-bit)
          - .NET Framework 4.7.2+ (安装版会自动检测 | Installer auto-detects)
          - 500MB 可用磁盘空间 | 500MB free disk space
          
          ---
          
          ### 💬 反馈与支持 | Feedback & Support
          
          - 🐛 [报告问题 | Report Issues](https://github.com/QykXczj/Nmodm/issues)
          - 💡 [功能建议 | Feature Requests](https://github.com/QykXczj/Nmodm/issues)
          - 📧 联系作者 | Contact: QykXczj
          
          ---
          
          **感谢使用 Nmodm！| Thanks for using Nmodm!** 🎉
        draft: ${{ github.event.inputs.draft }}
        prerelease: ${{ github.event.inputs.prerelease }}
        files: |
          release/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
